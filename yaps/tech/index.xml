<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>tech on</title><link>/yaps/tech/</link><description>Recent content in tech on</description><generator>Hugo</generator><language>en</language><lastBuildDate>Wed, 27 Nov 2024 12:00:00 +0800</lastBuildDate><atom:link href="/yaps/tech/index.xml" rel="self" type="application/rss+xml"/><item><title>Always Open Parathesis On Newline!</title><link>/yaps/tech/20241127_prefer_c_braces/</link><pubDate>Wed, 27 Nov 2024 12:00:00 +0800</pubDate><guid>/yaps/tech/20241127_prefer_c_braces/</guid><description>&lt;p>This post is my argument of preferring to open parathesis on a new line as opposed to putting in on the same line as a for or if statement.&lt;/p></description></item><item><title>Considering Hash Tables</title><link>/yaps/tech/20240525_considering_hash_tables/</link><pubDate>Sat, 25 May 2024 12:00:00 +0800</pubDate><guid>/yaps/tech/20240525_considering_hash_tables/</guid><description>&lt;p>For a while, I've been meaning to write some kind of a hash table from scratch for my own projects. Surprisingly for my game projects so far, I had totally avoided use of hashes and managed to optimise my problems to use simple dense arrays. The closest I came to using hash tables was when I wrote my profiler which identifies entries by hardcoded strings (which I could cheat by using their addresses instead but that's another story).&lt;/p></description></item><item><title> JS API Design Thoughts</title><link>/yaps/tech/20240102_js_api_design_with_closures_with_property_injection/</link><pubDate>Tue, 02 Jan 2024 12:00:00 +0800</pubDate><guid>/yaps/tech/20240102_js_api_design_with_closures_with_property_injection/</guid><description>&lt;p>This is probably one of the wierdest things I had to wrap my head around Javascript recently.
It's a combination of how closures work, functions being first class objects and that you can add properties into objects.&lt;/p></description></item><item><title>Overlay Pixel Shader Transforms</title><link>/yaps/tech/20231212_overlay_pixel_shader/</link><pubDate>Tue, 12 Dec 2023 12:00:00 +0800</pubDate><guid>/yaps/tech/20231212_overlay_pixel_shader/</guid><description>&lt;p>This post is just to document for my own reference the math that went behind the transformations (scale, rotate, translate) of the overlay pixel shader I wrote for Reshade &lt;a href="https://github.com/momohoudai/momo_reshade">here&lt;/a>.
It turns out that it was a little more tricky than I initially expected.&lt;/p></description></item><item><title>Reflections on using Javascript in 2023</title><link>/yaps/tech/20231106_javascript_reflections_2023/</link><pubDate>Mon, 06 Nov 2023 08:00:00 +0800</pubDate><guid>/yaps/tech/20231106_javascript_reflections_2023/</guid><description>&lt;p>Recently, I have been writing quite a bit of Javascript for a couple of side-projects.
I was a little inspired to attempt to write simple webapps without the use of any frameworks.
One of them is avaliable here: &lt;a href="https://momohoudai.github.io/fvf/">FvF&lt;/a>.
This post is just some personal reflections going back to use vanilla Javascript/CSS in 2023.&lt;/p></description></item><item><title>Point on triangle algorithms</title><link>/yaps/tech/20230517_overlapping_triangles/</link><pubDate>Thu, 18 May 2023 11:16:00 +0800</pubDate><guid>/yaps/tech/20230517_overlapping_triangles/</guid><description>&lt;p>A game I'm working on requires me to check if a point is overlapped by a triangle.
Being a dumb engineer who can't come up wiith his own algorithm, google gave me 3 algorithms.
Here I'm just going to share the algorithms and their performances.&lt;/p></description></item><item><title>C++ Flatten integer to 0/1</title><link>/yaps/tech/20230505_cpp_boolean_flattening_trick/</link><pubDate>Fri, 05 May 2023 13:25:00 +0800</pubDate><guid>/yaps/tech/20230505_cpp_boolean_flattening_trick/</guid><description>&lt;p>This is a quick trick to 'flatten' an integer into a 1 or 0.
This is probably a trick that only works in C/C++ because of how the not (!) operator works with integers.
While it's usefulness is dubious in C++, it might be useful in C.&lt;/p></description></item><item><title>Going from Markdown to Asciidoc</title><link>/yaps/tech/20210422_going_from_md_to_adoc/</link><pubDate>Sat, 22 Apr 2023 14:44:00 +0800</pubDate><guid>/yaps/tech/20210422_going_from_md_to_adoc/</guid><description>&lt;p>Here I'll pin down my thought process of changing my work's documentations from Markdown to Asciidoc.
I have been switching endlessly back and forth between them and it's getting really annoying because I just want to do my work at some point.
Hopefully after writing this, I will never look back until maybe 5 years later.&lt;/p></description></item><item><title>Excel INDEX/MATCH tl;dr</title><link>/yaps/tech/20230411_index_match_tldr/</link><pubDate>Mon, 10 Apr 2023 12:00:00 +0800</pubDate><guid>/yaps/tech/20230411_index_match_tldr/</guid><description>&lt;p>I was playing with Excel recently and for the hundredth time got stumped by how to use the INDEX/MATCH combo.
For the hundredth time in the past years, I open the same damn website and the same damn explanation which took awhile because my brain actually needed to work to understand what's going on.&lt;/p></description></item><item><title>My Raspberry PI Cookbook</title><link>/yaps/tech/20230312_rpi_cookbook/</link><pubDate>Sun, 12 Mar 2023 12:00:00 +0800</pubDate><guid>/yaps/tech/20230312_rpi_cookbook/</guid><description>&lt;p>I figured that I might as well save a Raspberry PI cookbook somewhere.&lt;/p></description></item><item><title>Deriving Triangle to Triangle transformation matrix</title><link>/yaps/tech/20220425_derive_triangle_to_triangle_transform/</link><pubDate>Mon, 25 Apr 2022 23:00:00 +0800</pubDate><guid>/yaps/tech/20220425_derive_triangle_to_triangle_transform/</guid><description>&lt;p>Here's how I derive the transformation matrix for getting from triangle A to triangle B to do shadows in my 2D engine.&lt;/p></description></item><item><title>Byte Alignment Notes</title><link>/yaps/tech/20211118_bytes_alignment_notes/</link><pubDate>Thu, 18 Nov 2021 12:00:00 +0800</pubDate><guid>/yaps/tech/20211118_bytes_alignment_notes/</guid><description>&lt;p>When dealing with raw memory directly, there might come the need to align your memory to the nearest of some power of 2.&lt;/p></description></item><item><title>Dirty C/C++</title><link>/yaps/tech/20210924_dirty_c/</link><pubDate>Fri, 24 Sep 2021 12:00:00 +0800</pubDate><guid>/yaps/tech/20210924_dirty_c/</guid><description>&lt;p>Here is a collection of cool snippets of C/C++ code. Updated regularly. Used to show superiority and implode the minds of my students. Also to use in my own code, of course, whenever viable.&lt;/p></description></item><item><title>Perspective Projection Matrix</title><link>/yaps/tech/20210801_perspective_projection_matrix/</link><pubDate>Sun, 01 Aug 2021 12:00:00 +0800</pubDate><guid>/yaps/tech/20210801_perspective_projection_matrix/</guid><description>&lt;p>I was searching around internet for a full derivation for the 3D Perspective Projection Matrix to apply to my handmade software renderer and I was surprised by how little information I could find about it. That prompted me to write this post, to document the derivation of the matrix, at least in my own eyes.&lt;/p></description></item><item><title>Circle to Finite Line Collision</title><link>/yaps/tech/20210428_circle_line_collision/</link><pubDate>Sun, 04 Jul 2021 12:00:00 +0800</pubDate><guid>/yaps/tech/20210428_circle_line_collision/</guid><description>&lt;p>Recently, I had to derive this particular collision detection algorithm for my bullet hell genre game. It's an interesting algorithm that can be expanded to deal with the 'moving circle vs static circle' and 'moving circle vs moving circle' problems.&lt;/p></description></item><item><title>[C/C++] The 'Glue' Preprocessor Trick</title><link>/yaps/tech/20210406_glue_c_preprocessor_trick/</link><pubDate>Tue, 06 Apr 2021 12:00:00 +0800</pubDate><guid>/yaps/tech/20210406_glue_c_preprocessor_trick/</guid><description>&lt;p>Macro tricks are rare to find nowadays.
Sometimes, I would code and &lt;em>know&lt;/em> of a trick but had forgotten how to go about implementing it because they can look as arcane as Template Metaprogramming.
Hopefully, I can document some of my knowledge of these tricks in this blog.
Here, I will introduce what I call the 'Glue' macro trick.&lt;/p></description></item><item><title>A small shortcoming of return-by-value</title><link>/yaps/tech/20210324_shortcomings_of_return_by_value_c_style_constructors/</link><pubDate>Wed, 24 Mar 2021 12:00:00 +0800</pubDate><guid>/yaps/tech/20210324_shortcomings_of_return_by_value_c_style_constructors/</guid><description>&lt;p>Recently, while coding on my personal C/C++ game engine project, I ran into a surprising shortcoming of functions that returns an object by value. This was when I was still trying to keep things consistant in my project and went for a functional-programming style.&lt;/p></description></item></channel></rss>